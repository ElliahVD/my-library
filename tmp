import mysql from 'mysql2';
import { Pool } from 'mysql2/promise';
import { Logger } from 'pino';

import Services from '../definition/Services';

export default class DbService {
    private logger: Logger;

    private client: Pool;

    constructor({ config, logger }: Services) {
        this.logger = logger;

        const pool = mysql.createPool({
            host: config.mysql.host,
            user: config.mysql.user,
            port: config.mysql.port,
            password: config.mysql.password,
            database: config.mysql.dbName,
            charset: 'utf8mb4',
        });

        this.client = pool.promise();

        this.client.on('connection', () => {
            this.logger.info('Connected to MySQL database');
        });
    }

    async runQuery(query: string, values?: any): Promise<mysql.RowDataPacket[] | mysql.RowDataPacket[][] | mysql.OkPacket | mysql.OkPacket[] | mysql.ResultSetHeader> {
        const connection = await this.client.getConnection();

        const [rows] = await connection.execute(query, values);
        connection.release();
        return rows;
    }

    async disconnect(): Promise<void> {
        return this.client.end();
    }
}
